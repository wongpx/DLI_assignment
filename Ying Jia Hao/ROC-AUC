# ===== ROC-AUC (One-vs-Rest) =====
# Binarize target labels for multiclass ROC
y_test_bin = label_binarize(y_test, classes=sorted(y.unique()))
y_score = lgb_model.predict_proba(x_test)

roc_auc_macro = roc_auc_score(y_test_bin, y_score, average='macro', multi_class='ovr')
print(f"Macro-Average ROC-AUC: {roc_auc_macro:.4f}")

plt.figure(figsize=(10, 8))
for i, class_label in enumerate(sorted(y.unique())):
    fpr, tpr, _ = roc_curve(y_test_bin[:, i], y_score[:, i])
    plt.plot(fpr, tpr, label=f"{le.inverse_transform([class_label])[0]} (AUC = {roc_auc_score(y_test_bin[:, i], y_score[:, i]):.2f})")

plt.plot([0, 1], [0, 1], 'k--')  
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curves - LightGBM")
plt.legend(loc="lower right")
plt.show()
